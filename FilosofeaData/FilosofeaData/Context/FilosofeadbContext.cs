// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using FilosofeaData.Models;

#nullable disable

namespace FilosofeaData.Context
{
    public partial class FilosofeadbContext : DbContext
    {
        public FilosofeadbContext()
        {
        }

        public FilosofeadbContext(DbContextOptions<FilosofeadbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Autores> Autores { get; set; }
        public virtual DbSet<AutoresCategorias> AutoresCategorias { get; set; }
        public virtual DbSet<AutoresCategoriasTipos> AutoresCategoriasTipos { get; set; }
        public virtual DbSet<Entradas> Entradas { get; set; }
        public virtual DbSet<EntradasAutores> EntradasAutores { get; set; }
        public virtual DbSet<EntradasCategorias> EntradasCategorias { get; set; }
        public virtual DbSet<EntradasCategoriasTipos> EntradasCategoriasTipos { get; set; }
        public virtual DbSet<Obras> Obras { get; set; }
        public virtual DbSet<ObrasCategorias> ObrasCategorias { get; set; }
        public virtual DbSet<ObrasCategoriasTipos> ObrasCategoriasTipos { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS");

            modelBuilder.Entity<Autores>(entity =>
            {
                entity.Property(e => e.FhCreacion).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AutoresCategorias>(entity =>
            {
                entity.HasKey(e => new { e.IdAutor, e.IdAutorCategoria });

                entity.HasOne(d => d.IdAutorNavigation)
                    .WithMany(p => p.AutoresCategorias)
                    .HasForeignKey(d => d.IdAutor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Autores_Categorias_Autores");

                entity.HasOne(d => d.IdAutorCategoriaNavigation)
                    .WithMany(p => p.AutoresCategorias)
                    .HasForeignKey(d => d.IdAutorCategoria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Autores_Categorias_Autores_Categorias_Tipos");
            });

            modelBuilder.Entity<AutoresCategoriasTipos>(entity =>
            {
                entity.HasKey(e => e.IdAutorCategoria)
                    .HasName("PK_Autor_Categoria");

                entity.Property(e => e.AutorCategoria).IsUnicode(false);

                entity.HasOne(d => d.IdAutorCategoriaPadreNavigation)
                    .WithMany(p => p.InverseIdAutorCategoriaPadreNavigation)
                    .HasForeignKey(d => d.IdAutorCategoriaPadre)
                    .HasConstraintName("FK_Autores_Categorias_Autores_Categorias");
            });

            modelBuilder.Entity<Entradas>(entity =>
            {
                entity.Property(e => e.FhEntrada).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Hl1).IsUnicode(false);

                entity.Property(e => e.Hl2).IsUnicode(false);

                entity.Property(e => e.Texto).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Entradas)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Entradas_Usuarios");
            });

            modelBuilder.Entity<EntradasAutores>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.IdAutor });

                entity.HasOne(d => d.IdAutorNavigation)
                    .WithMany(p => p.EntradasAutores)
                    .HasForeignKey(d => d.IdAutor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Entradas_Autores_Autores");

                entity.HasOne(d => d.IdEntradaNavigation)
                    .WithMany(p => p.EntradasAutores)
                    .HasForeignKey(d => d.IdEntrada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Entradas_Autores_Entradas");
            });

            modelBuilder.Entity<EntradasCategorias>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.IdEntradaCategoria })
                    .HasName("PK_Entradas_Categorias_1");

                entity.HasOne(d => d.IdEntradaNavigation)
                    .WithMany(p => p.EntradasCategorias)
                    .HasForeignKey(d => d.IdEntrada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Entradas_Categorias_Entradas");

                entity.HasOne(d => d.IdEntradaCategoriaNavigation)
                    .WithMany(p => p.EntradasCategorias)
                    .HasForeignKey(d => d.IdEntradaCategoria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Entradas_Categorias_Entradas_Categorias_Tipos");
            });

            modelBuilder.Entity<EntradasCategoriasTipos>(entity =>
            {
                entity.HasKey(e => e.IdEntradaCategoria)
                    .HasName("PK_Entradas_Categorias");

                entity.Property(e => e.Categoria).IsUnicode(false);

                entity.HasOne(d => d.IdEntradaCategoriaPadreNavigation)
                    .WithMany(p => p.InverseIdEntradaCategoriaPadreNavigation)
                    .HasForeignKey(d => d.IdEntradaCategoriaPadre)
                    .HasConstraintName("FK_Entradas_Categorias_Entradas_Categorias");
            });

            modelBuilder.Entity<Obras>(entity =>
            {
                entity.HasOne(d => d.IdAutorNavigation)
                    .WithMany(p => p.Obras)
                    .HasForeignKey(d => d.IdAutor)
                    .HasConstraintName("FK_Obras_Autores");
            });

            modelBuilder.Entity<ObrasCategorias>(entity =>
            {
                entity.HasKey(e => new { e.IdObra, e.IdObraCategoria })
                    .HasName("PK_Obras_Categorias_1");

                entity.HasOne(d => d.IdObraNavigation)
                    .WithMany(p => p.ObrasCategorias)
                    .HasForeignKey(d => d.IdObra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Obras_Categorias_Obras");

                entity.HasOne(d => d.IdObraCategoriaNavigation)
                    .WithMany(p => p.ObrasCategorias)
                    .HasForeignKey(d => d.IdObraCategoria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Obras_Categorias_Obras_Categorias_Tipos");
            });

            modelBuilder.Entity<ObrasCategoriasTipos>(entity =>
            {
                entity.HasKey(e => e.IdObraCategoria)
                    .HasName("PK_Obras_Categorias");

                entity.Property(e => e.ObraCategoria).IsUnicode(false);

                entity.HasOne(d => d.IdObraCategoriaPareNavigation)
                    .WithMany(p => p.InverseIdObraCategoriaPareNavigation)
                    .HasForeignKey(d => d.IdObraCategoriaPare)
                    .HasConstraintName("FK_Obras_Categorias_Obras_Categorias");
            });

            modelBuilder.Entity<Usuarios>(entity =>
            {
                entity.Property(e => e.FhCreacion).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Mail).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}